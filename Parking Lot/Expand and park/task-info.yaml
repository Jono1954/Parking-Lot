type: edu
custom_name: stage3
files:
- name: src/parking/Main.kt
  visible: true
  text: |-
    package parking

    import java.util.*

    enum class State(s: String) {
        FREE("free"),
        OCCUPIED("occupied")
    }

    const val fixedNoOfParkingSpots = 2

    data class Car(
            var parkingSpot: Int = -99,
            var registration: String = "-99",
            var color: String = "-99"
    )

    // Map of parking spot number to FREE/OCCUPIED
    var mapOfParkingSpots = mutableMapOf<Int, State>()

    // Map of parking spot number to car details
    var mapOfParkedCars = mutableMapOf<Int, Car>()

    val scanner = Scanner(System.`in`)

    fun main() {

        initializeParkingSpots(fixedNoOfParkingSpots)

        // Occupy first spot as per instruction - random car values
        assignCarToSpot(1, "PA-03-HV-1234", "Grey")

        while (scanner.hasNextLine()) {
            readCommandLine().apply {
                splitCommandLine(this).let { userInput ->
                    if (checkInputIsValid(userInput)) {

                        val parkOrLeave = userInput[0]

                        when (parkOrLeave) {

                            "park" -> {
                                val registrationNumber = userInput[1]
                                val color = userInput[2]

                                getNumberOfFirstFreeParkingSpot().let { firstFreeParkingNumber ->
                                    if (firstFreeParkingNumber > 0) {
                                        assignCarToSpot(firstFreeParkingNumber, registrationNumber, color)
                                        println("$color car parked in spot $firstFreeParkingNumber.")
                                    } else {
                                        println("Error - no free parkings")
                                    }
                                }
                            }

                            "leave" -> {
                                val parkingNumber = userInput[1].toInt()
                                if (carInSpot(parkingNumber)) {
                                    val parkedCar = getDetailsOfParkedCar(parkingNumber)
                                    removeCarFromSpot(parkingNumber)
                                    println("Spot $parkingNumber is free.")
                                    removeCarFromMapOfParkedCars(parkedCar)

                                } else {
                                    println("There is no car in spot $parkingNumber.")
                                }
                            }
                            else -> println("Unknown input")
                        }
                    }
                }
            }
        }
    }

    private fun initializeParkingSpots(noOfParkings: Int) {
        for (spotNumber in 1..noOfParkings) {
            mapOfParkingSpots[spotNumber] = State.FREE
        }
    }

    private fun markSpotOneAsNotFree() {
        mapOfParkingSpots[1] = State.OCCUPIED
        mapOfParkedCars[1] = Car(1, "KA-01-HH-1234", "Blue")
    }

    private fun markSpotOneAsFree() {
        mapOfParkingSpots[1] = State.FREE
    }

    private fun readCommandLine(): String {
        return scanner.nextLine()
    }

    private fun splitCommandLine(input: String): List<String> {
        return input.split(" ")
    }

    private fun checkInputIsValid(userInput: List<String>): Boolean {
        if (userInput[0] == "park" || userInput[0] == "leave") {
            when (userInput[0]) {
                "park" -> {
                    val registrationNumber = userInput[1]
                    val color = userInput[2]
                    return (registrationNumber != "" && color != "")
                }
                "leave" -> {
                    val parkingSpotNumber = userInput[1].toInt()
                    return (parkingSpotNumber in 1..fixedNoOfParkingSpots)
                }
                else -> return false
            }
        } else {
            println("First word of command must be 'park' or 'leave'")
            return false
        }
    }

    private fun getNumberOfFirstFreeParkingSpot(): Int {
        for ((key, value) in mapOfParkingSpots) {
            if (value == State.FREE) {
                return key
            }
        }
        return -1
    }

    private fun carInSpot(parkingNumber: Int): Boolean {
        // println("$mapOfParkingSpots")
        return (mapOfParkingSpots[parkingNumber] == State.OCCUPIED)
    }

    private fun assignCarToSpot(parkingNumber: Int, registration: String, color: String): Car {
        val car = Car(parkingSpot = parkingNumber, registration = registration, color = color.capitalize())
        mapOfParkingSpots[parkingNumber] = State.OCCUPIED
        mapOfParkedCars[parkingNumber] = car
        return car
    }

    private fun getDetailsOfParkedCar(parkingNumber: Int): Car {
        return mapOfParkedCars[parkingNumber]!!
    }

    private fun removeCarFromSpot(spot: Int) {
        mapOfParkingSpots[spot] = State.FREE
    }

    private fun removeCarFromMapOfParkedCars(car: Car) {
        mapOfParkedCars.remove(car.parkingSpot)
    }
  learner_created: false
- name: test/ParkingTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import parking.MainKt;

    public abstract class ParkingTest<T> extends StageTest<T> {
        public ParkingTest() {
            super(MainKt.class);
        }
    }
  learner_created: false
- name: test/ParkingTest.kt
  visible: false
  text: |+
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase


    /** Default testCase. */
    fun <T> testCase(attach: T, input: String) = TestCase<T>().apply {
        setInput(input)
        setAttach(attach)
    }

    open class InputClue(
            val input: String,
            /** Do not show correct output and input. */
            val isPrivate: Boolean = false,
            /** Hint will be printed even for private tests. */
            val hint: String? = null
    ) {

        /** Ciphers [message] or adds a [hint] to the error if it is not null. */
        fun toFailure(message: String): CheckResult {
            if (isPrivate) {
                // Ciphered
                return CheckResult.wrong("Incorrect output. This is a private test. " + (hint ?: ""))
            } else {
                return CheckResult.wrong("$message ${hint ?: ""}")
            }
        }
    }

    class OutputClue(input: String, val output: String, isPrivate: Boolean, hint: String?)
        : InputClue(input, isPrivate, hint) {

        fun compareLines(reply: String) : CheckResult {
            val hisLines = reply.trim().lines()
            val myLines = output.trim().lines()

            myLines.zip(hisLines).withIndex().forEach { (i, pair) ->
                val (my, his) = pair
                if (my != his) {
                    return toFailure("Error in line ${i + 1}: \"$his\" instead of \"$my\".")
                }
            }
            // if all common lines are correct, but sizes are different.
            if (hisLines.size != myLines.size) {
                return toFailure("Your output contains ${hisLines.size}" +
                        " lines instead of ${myLines.size}.")
            }
            return CheckResult.correct();
        }
    }

    fun outputCase(
            input: String,
            output: String,
            isPrivate: Boolean = false,
            hint: String? = null
    ) = testCase(OutputClue(input, output, isPrivate, hint), input)

    /** Trim Starts of all lines and trim empty lines. */
    fun String.trimAllIndents() = this.lines()
            .map { it.trimStart() }
            .dropWhile { it.isBlank() }
            .dropLastWhile { it.isBlank() }
            .joinToString("\n")


    class Task3Test : ParkingTest<OutputClue>() {

        override fun generate(): List<TestCase<OutputClue>> {
            // 20 cars
            val stripedCars = List(10) { i ->
                listOf("park KA-$i-HH-9999 White",
                        "park KA-$i-HH-3672 Green")
            }
                    .flatten()
                    .joinToString("\n")

            val stripedAns = List(10) { i ->
                listOf("White car parked in spot ${2 * i + 1}.",
                        "Green car parked in spot ${2 * i + 2}.")
            }
                    .flatten()
                    .joinToString("\n")


            return listOf(
                    outputCase(
                            """$stripedCars
                                park Rs-P-N-21 Red
                                leave 1
                                park Rs-P-N-21 Red
                                exit
                            """.trimAllIndents(),
                            """
                                $stripedAns
                                Sorry, the parking lot is full.
                                Spot 1 is free.
                                Red car parked in spot 1.
                            """.trimAllIndents(),
                            hint = "See example 1."),
                    outputCase(
                            """
                                $stripedCars
                                park Rs-P-N-21 Red
                                park ABC Green
                                leave 5
                                leave 1
                                leave 20
                                park Rs-P-N-21 White
                                park Rs-P-N-22 Blue
                                park Rs-P-N-23 Red
                                park A B
                                exit
                            """.trimAllIndents(),
                            """
                                $stripedAns
                                Sorry, the parking lot is full.
                                Sorry, the parking lot is full.
                                Spot 5 is free.
                                Spot 1 is free.
                                Spot 20 is free.
                                White car parked in spot 1.
                                Blue car parked in spot 5.
                                Red car parked in spot 20.
                                Sorry, the parking lot is full.
                            """.trimAllIndents(),
                            isPrivate = true,
                            hint = "Spots should be assigned in ascending order.")
            )
        }


        override fun check(reply: String, clue: OutputClue): CheckResult {

            return clue.compareLines(reply)
        }
    }

  learner_created: false
feedback_link: https://hyperskill.org/projects/75/stages/418/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/75/stages/418/implement">JetBrains
    Academy</a>
  time: Fri, 18 Sep 2020 12:40:29 UTC
record: 2
